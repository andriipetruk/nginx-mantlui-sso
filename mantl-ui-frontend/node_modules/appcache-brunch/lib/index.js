// Generated by CoffeeScript 1.6.3
var Manifest, Walker, crypto, fs, pathlib;

crypto = require('crypto');

fs = require('fs');

pathlib = require('path');

Walker = (function() {
  function Walker() {
    this.todo = {};
    this.walking = false;
  }

  Walker.prototype.add = function(path) {
    this.todo[path] = 1;
    return this.walking = true;
  };

  Walker.prototype.del = function(path) {
    delete this.todo[path];
    return this.walking = Object.keys(this.todo).length > 0;
  };

  Walker.prototype.readdir = function(path, callback) {
    var _this = this;
    this.add(path);
    return fs.readdir(path, function(err, filenames) {
      if (err != null) {
        throw err;
      }
      _this.del(path);
      return callback(filenames);
    });
  };

  Walker.prototype.stat = function(path, callback) {
    var _this = this;
    this.add(path);
    return fs.stat(path, function(err, stats) {
      if (err != null) {
        throw err;
      }
      _this.del(path);
      return callback(stats);
    });
  };

  Walker.prototype.walk = function(path, callback) {
    var _this = this;
    return this.readdir(path, function(filenames) {
      return filenames.forEach(function(filename) {
        var filePath;
        filePath = pathlib.join(path, filename);
        return _this.stat(filePath, function(stats) {
          if (stats.isDirectory()) {
            return _this.walk(filePath, callback);
          } else {
            return callback(filePath);
          }
        });
      });
    });
  };

  return Walker;

})();

Manifest = (function() {
  var format;

  function Manifest(config) {
    var cfg, k, _ref, _ref1, _ref2;
    this.config = config;
    if ('appcache' in this.config) {
      console.warn('Warning: config.appcache is deprecated, please move it to config.plugins.appcache');
    }
    this.options = {
      ignore: /[\\/][.]/,
      externalCacheEntries: [],
      network: ['*'],
      fallback: {},
      staticRoot: '.',
      manifestFile: 'appcache.appcache'
    };
    cfg = (_ref = (_ref1 = (_ref2 = this.config.plugins) != null ? _ref2.appcache : void 0) != null ? _ref1 : this.config.appcache) != null ? _ref : {};
    for (k in cfg) {
      this.options[k] = cfg[k];
    }
  }

  Manifest.prototype.brunchPlugin = true;

  Manifest.prototype.onCompile = function() {
    var paths, walker,
      _this = this;
    paths = [];
    walker = new Walker;
    return walker.walk(this.config.paths["public"], function(path) {
      var shasums;
      if (!(/[.]appcache$/.test(path) || _this.options.ignore.test(path))) {
        paths.push(path);
      }
      if (!walker.walking) {
        shasums = [];
        paths.sort();
        return paths.forEach(function(path) {
          var s, shasum;
          shasum = crypto.createHash('sha1');
          s = fs.ReadStream(path);
          s.on('data', function(data) {
            return shasum.update(data);
          });
          return s.on('end', function() {
            var p;
            shasums.push(shasum.digest('hex'));
            if (shasums.length === paths.length) {
              shasum = crypto.createHash('sha1');
              shasum.update(shasums.sort().join(), 'ascii');
              return _this.write((function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = paths.length; _i < _len; _i++) {
                  p = paths[_i];
                  _results.push(pathlib.relative(this.config.paths["public"], p));
                }
                return _results;
              }).call(_this), shasum.digest('hex'));
            }
          });
        });
      }
    });
  };

  format = function(obj) {
    var k;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = Object.keys(obj).sort();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        _results.push("" + k + " " + obj[k]);
      }
      return _results;
    })()).join('\n');
  };

  Manifest.prototype.write = function(paths, shasum) {
    var p;
    return fs.writeFileSync(pathlib.join(this.config.paths["public"], this.options.manifestFile), "CACHE MANIFEST\n# " + shasum + "\n\nNETWORK:\n" + (this.options.network.join('\n')) + "\n\nFALLBACK:\n" + (format(this.options.fallback)) + "\n\nCACHE:\n" + (((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        p = paths[_i];
        _results.push("" + this.options.staticRoot + "/" + p);
      }
      return _results;
    }).call(this)).join('\n')) + "\n" + (this.options.externalCacheEntries.join('\n')));
  };

  return Manifest;

})();

module.exports = Manifest;
